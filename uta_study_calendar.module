<?php

// https://www.ostraining.com/blog/drupal/d8-calendar/

use Drupal\node\Entity\Node;

// Every course is item in taxonomy, thus enabling easy filtering
function getTaxonomyTerm($keyword) {
  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('vid', "courses");
  $query->condition('name', $keyword);
  $tids = $query->execute();
  if(empty($tids)) {
    $term = \Drupal\taxonomy\Entity\Term::create([
      'vid' => 'courses',
      'name' => $keyword,
    ]);
    $term->save();
    print("Term created");
  }
  return $tids;
}

// Checks if the course code and event id combo already exists in some node
function nodeExists($courseId, $eventId, $eventUnixTimestamp) {
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties(['field_course_id' => $courseId,
                        'field_event_id' => $eventId,
                        'field_unix_timestamp' => $eventUnixTimestamp,
                      ]);
  //print($courseId . " " . $eventId . " " . $eventUnixTimestamp . "\n");
  $found = false;
  foreach ($nodes as $n) {
    $found = true;
    print("Node found\n");
  }
  return $found;
}



function uta_study_calendar_cron() {
  //entity_delete_multiple('node', \Drupal::entityQuery('node')->execute());
  $jsonObjectArray = json_decode(file_get_contents("http://localhost/lukkari_data.json"));
  //print(count($jsonObjectArray) . "\n");
  $toistuvuus = [];
  $killSwitch = 0;
  foreach ($jsonObjectArray as $course) {
    //print($course->name . " - ");
    //print($course->name . ":\n");
    foreach ($course->_opsi_opryhmat as $opryhmat) {
      //print_r($opryhmat);
      if (isset($opryhmat->nimi))
        //print(">>" . $opryhmat->nimi . "\n");
      foreach ($opryhmat->ajat as $ajat) {
        //$date = date("Y-m-d\TH:i:s\Z", $ajat->alkuaika / 1000);
        $unixTime = $ajat->alkuaika / 1000;
        $date = date("Y-m-d", $unixTime);
        if (isset($ajat->toistuvuus_kertaa)) {
          for ($i = $ajat->toistuvuus_kertaa; $i > 0; $i--) {
            if ($ajat->toistuvuustyyppi == "Kuukausittain") {
              $unixTime = strtotime("+28 day", $unixTime);
            }
            elseif ($ajat->toistuvuustyyppi == "Joka toinen viikko") {
              $unixTime = strtotime("+14 day", $unixTime);
            }
            elseif ($ajat->toistuvuustyyppi == "Viikoittain") {
              $unixTime = strtotime("+7 day", $unixTime);
            }
            else {
              // Error message should be added
              $unixTime = strtotime("+7 day", $unixTime);
            }
            //print($date . "\n");
            if (nodeExists($course->id, $ajat->id, $unixTime)){
              continue;
            }
            $newJob = Node::create([
              'type' => 'course_event',
              'title' => $course->name,
              'field_study_group' => $opryhmat->nimi,
              'field_course_id' => $course->id,
              'field_event_id' => $ajat->id,
              'field_location' => $ajat->paikka,
              'field_unix_timestamp' => $unixTime,
              'field_course_taxonomy' => getTaxonomyTerm($course->name),
              'field_event_start' => [date("Y-m-d", $unixTime) . "T" . $ajat->alkutunnit . ":00:00",],
              'field_event_end' => [date("Y-m-d", $unixTime) . "T" . $ajat->lopputunnit . ":00:00",],
            ]);
            $killSwitch++;
            $newJob->save();
            //print("Node created\n");


            //print(date("Y-m-d", $unixTime) . "T" . $ajat->alkutunnit . ":00:00\n");

            //if ($killSwitch > 10)
            //  die();


          }
        }
        $toistuvuus[] = $ajat->toistuvuustyyppi;

      }

    }
  }
}
